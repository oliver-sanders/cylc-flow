#!/usr/bin/env bash
# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) NIWA & British Crown (Met Office) & Contributors.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

usage () {
    cat << __USAGE__
swarm [OPTIONS] (build|configure|run)

Build, configure and run a swarm of docker containers for test purposes.

This swarm is both for local development and automated testing to proivde
a stable testing/development platform.

Containers ports are correctly exposed so they can be used either natively
or in virtual machines.

Commands:
    build       Build docker images.
    configure   Configure system ssh and cylc configuration files.
    run         Run docker containers.

Options:
    -y --yes    Don't prompt.
    --debug     Runs the script with set -x for debug.
__USAGE__
    exit 0
}

set -eu

cd "$(dirname "$0")/../../"

YES=false
SSHD="$HOME/.ssh"

prompt () {
    # the message to display
    local MSG="$1"

    if $YES; then
        return 0
    fi

    local USR=''
    while true; do
        read -rp "$MSG [y/n]: " USR
        case $USR in
            [Yy])
                return 0
                break
                ;;
            [Nn])
                return 1
                break
                ;;
        esac
    done
}

generate_keys () {
    # the name of the key to generate
    local KEY="$1"

    if ! [[ -f "$SSHD/$KEY" ]]; then
        if prompt "(Re)Generate ssh key: $KEY?"; then
            ssh-keygen \
                -t rsa \
                -b 4096 \
                -C 'docker@localhost' \
                -f "$SSHD/$KEY" \
                -P ''
        else
            exit 1
        fi
    fi
}

configure_ssh () {
    local BASE='.docker-ssh-keys'
    local KEY
    mkdir "$BASE" -p

    # ssh key pair for connecting to docker containers
    KEY='cylc-docker'
    generate_keys "$KEY" "$BASE"
    cp "$SSHD/$KEY"* "$BASE"

    # ssh keys for connecting to $(hostname) from docker containers
    #KEY="docker-cylc-$(hostname -f)"
    #generate_keys "$KEY" "$BASE"
    #cp "$SSHD/$KEY"* "$BASE"
}

append_config () {
    # the line to add to the config
    local LINE="$1"
    # the config to add the line to
    local LOC="$2"
    # whether the line should appear at the top or bottom (default bottom)
    local POS=${3:-bottom}

    # create the config if not already there
    mkdir -p "$(dirname "$LOC")"
    touch "$LOC"

    # add the line to the config...
    if ! grep -q "$LINE" "$LOC"; then
        if prompt "Write \"$LINE\" to \"$LOC\"?"; then
            if [[ "$POS" == top ]]; then
                # ... at the top of the file
                sed -i "1i$LINE" "$LOC"
            elif [[ "$POS" == bottom ]]; then 
                # ... at the bottom of the file
                echo -e "\n$LINE" >> "$LOC"
            else
                # ... nowhere
                echo "Invalid position :$PWD" >&2
                exit 1
            fi

        else
            exit 1
        fi
    fi
}

build () {
    docker build . \
        -f dockerfiles/cylc-dev/Dockerfile \
        -t cylc-dev:latest
    docker build . \
        -f dockerfiles/remote-indep-poll/Dockerfile \
        -t cylc-remote-indep-poll:latest
}

configure () {
    HERE="$(realpath "$PWD")"

    # generate required ssh keys
    configure_ssh

    # map exposed docker ports to hostnames
    append_config \
        "Include $HERE/etc/conf/ssh_config" \
        "$HOME/.ssh/config" \
        top  # ssh config includes must be at the top

    # map ssh hostnames to cylc platforms
    append_config \
        "%include '$HERE/etc/conf/global.cylc'" \
        "$HOME/.cylc/flow/$(cylc version)/global-tests.cylc"
    append_config \
        "%include '$HERE/etc/conf/global.cylc'" \
        "$HOME/.cylc/flow/$(cylc version)/global.cylc"
}

interactive () {
    docker run -it \
        -p 42222:22 \
        --privileged \
        cylc-remote-indep-poll:latest
}

run () {
    docker run -t -d \
        -p 42222:22 \
        --privileged \
        cylc-remote-indep-poll:latest
}

cmds=()
for arg in "$@"; do
    case "$arg" in
        --help)
            usage
            ;;
        -y|--yes)
            YES=true
            ;;
        --debug)
            set -x
            ;;
        build|configure|run|interactive)
            cmds+=("$arg")
            ;;
        *)
            echo "Invalid argument '$arg'" >&2
            exit 1
    esac
done

if [[ ${#cmds[@]} -eq 0 ]]; then
    usage
fi

for cmd in "${cmds[@]}"; do
    "${cmd}"
done
