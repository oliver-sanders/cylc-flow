name: test

on: [pull_request]


jobs:
  #fast-tests:
  #  runs-on: ubuntu-latest
  #  timeout-minutes: 15
  #  strategy:
  #    matrix:
  #      python-version: ['3.7', '3.8']
  #  steps:
  #    - name: Checkout
  #      uses: actions/checkout@v2

  #    - name: Configure Python
  #      uses: actions/setup-python@v1
  #      with:
  #        python-version: ${{ matrix.python-version }}

  #    - name: Apt-Get
  #      run: |
  #        sudo apt-get update
  #        sudo apt-get install -y shellcheck sqlite3

  #    - name: Install
  #      run: |
  #        pip install ."[all]"

  #    - name: Style
  #      run: |
  #        pycodestyle
  #        flake8
  #        etc/bin/shellchecker

  #    - name: Unit Tests
  #      run: |
  #        pytest -n 5 tests/unit

  #    - name: Integration Tests
  #      run: |
  #        pytest -n 5 tests/integration


  #build-docker:
  #  runs-ok: ubuntu-latest
  #  timeout-minutes: 15
  #  steps:
  #    - name: Checkout
  #      uses: actions/checkout@v2

  #    - name: Build
  #      run: |
  #        dockerfiles/build build

  #    - name: Cache Build
  #      uses: actions/upload-artifact@v2
  #      with:
  #        name:
  #        path:


  functional-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        python-version: ['3.7']
        tests: [
          ['tests/f', '1/4', 'local_background_indep_tcp'],
          ['tests/f', '2/4', 'local_background_indep_tcp'],
          ['tests/f', '3/4', 'local_background_indep_tcp'],
          ['tests/f', '4/4', 'local_background_indep_tcp'],
          ['tests/k', '1/1', 'local_background_indep_tcp'],
          ['tests/f tests/k', '1/1', 'remote_background_indep_poll']
        ]
    env:
      BASE: ${{ matrix.tests[0] }}
      CHUNK: ${{ matrix.tests[1] }}
      PLATFORM: ${{ matrix.tests[2] }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Apt-Get
        run: |
          sudo apt-get update
          sudo apt-get install -y sqlite3

      - name: Install
        run: |
          pip install ."[all]"

      - name: Swarm
        run: |
          etc/bin/swarm --yes --debug configure
          etc/bin/swarm --yes --debug build
          etc/bin/swarm --yes --debug run

      - name: Test
        run: |
          if [[ "${BASE}" == 'tests/k' ]]; then
              NPROC=4
          else
              NPROC=8
          fi
          # NOTE: $BASE is purposefully un-quoted
          etc/bin/run-functional-tests \
              --platform "${{ matrix.platform }}" \
              -j "${NPROC}" \
              --state=save ${BASE} \
          || (
              echo '=== Re-running Failed Tests ==='
              CHUNK= etc/bin/run-functional-tests \
                  --platform "${{ matrix.platform }}" \
                  -j "${NPROC}" \
                  --state=save,failed
          )

      - name: Debug
        if: failure()
        run: |
          cylc scan -f --color=never
          find "$HOME/cylc-run" -name '*.err' -type f \
              -exec echo '==== {} ====' \; -exec cat '{}' \;
          find "${TMPDIR:-/tmp}/${USER}/cylctb-"* -type f \
              -exec echo '==== {} ====' \; -exec cat '{}' \;
