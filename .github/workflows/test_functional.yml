name: functional tests

on: [pull_request, workflow_dispatch]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name || matrix.chunk }}
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest']
        python-version: ['3.7']
        test-base: ['tests/f']
        chunk: ['1/4', '2/4', '3/4', '4/4']
        platform: ['_local_background* _local_at*']
        include:
          # tests/k
          - name: 'flaky'
            test-base: 'tests/k'
            chunk: '1/1'
          # remote platforms
          - name: '_remote_background_indep_poll'
            test-base: 'tests/f tests/k'
            chunk: '1/1'
            platform: '_remote_background_indep_poll _remote_at_indep_poll'
          - name: '_remote_background_indep_tcp'
            test-base: 'tests/f tests/k'
            chunk: '1/1'
            platform: '_remote_background_indep_tcp _remote_at_indep_tcp'
          # macos
          - name: 'macos'
            os: 'macos-latest'
            python-version: '3.7'
            tests-base: 'tests/f'
            chunk: '1/4'
            platform: '_local_background*'

    env:
      # these vars are used by etc/bin/run-functional-tests
      CHUNK: ${{ matrix.chunk }}
      CYLC_TEST_PLATFORMS: ${{ matrix.platform }}
      CYLC_COVERAGE: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Brew Install
        if: startsWith(matrix.os, 'macos')
        run: |
          # apply DNS patch
          patch cylc/flow/hostuserutil.py < etc/conf/macos-patch

          # install system deps
          brew update
          brew install bash coreutils gnu-sed

          # add GNU coreutils and sed to the user PATH
          # (see instructions in brew install output)
          echo \
            "$(brew --prefix)/opt/coreutils/libexec/gnubin" \
            >> "${GITHUB_PATH}"
          echo \
            "/usr/local/opt/gnu-sed/libexec/gnubin" \
            >> "${GITHUB_PATH}"

      - name: Apt-Get Install
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y sqlite3 tree

      - name: Add .github/bin/ to PATH
        # Sets up mocked mail command & any other custom executables
        run: echo "${{ github.workspace }}/.github/bin" >> $GITHUB_PATH

      - name: Install
        run: |
          pip install git+https://github.com/metomi/rose@master
          pip install -e ."[all]"
          pip install --no-deps git+https://github.com/cylc/cylc-rose.git@master
          mkdir "$HOME/cylc-run"

      - name: Configure Atrun
        if: contains(matrix.tests[2], '_local_at')
        run: |
          PTH="$HOME/.cylc/flow/$(cylc version)"
          mkdir -p "${PTH}"
          cat > "${PTH}/global-test.cylc" << __HERE__
            [platforms]
                [[_local_at_indep_tcp]]
                    hostname = localhost
          __HERE__

      - name: Swarm Configure
        run: |
          etc/bin/swarm --yes --debug configure

      - name: Swarm Build
        if: contains(matrix.tests[2], '_remote')
        run: |
          # `swarm configure` seems to get ignored so override the user config
          cp etc/conf/ssh_config $HOME/.ssh/config
          # build and run the swarm
          etc/bin/swarm --yes --debug build
          etc/bin/swarm --yes --debug run
          # test that it's up and running before proceeding
          sleep 1
          ssh -vv _remote_background_indep_poll hostname

      - name: Test
        timeout-minutes: 35
        continue-on-error: true
        id: functest
        run: |
          # Use non-UTC time zone
          export TZ=XXX-05:30

          if [[ '${{ matrix.test-base }}' == 'tests/k' ]]; then
              NPROC=4
          else
              NPROC=8
          fi
          # NOTE: test base is purposefully un-quoted
          etc/bin/run-functional-tests \
              -j "${NPROC}" \
              --state=save ${{ matrix.test-base }}

      - name: Re-run failed tests
        timeout-minutes: 10
        if: steps.functest.conclusion == 'failure'
        run: |
          # give tests a second chance to pass
          # TODO: obviously not a good strategy but necessary at the moment
          export TZ=XXX-05:30
          cylc scan  # is anything still running from the last run?
          etc/bin/run-functional-tests \
              -j 4 \
              --state=save,failed ${{ matrix.test-base }}

      - name: Debug
        if: failure()
        timeout-minutes: 1
        run: |
          cylc scan
          find "$HOME/cylc-run" -name '*.err' -type f \
              -exec echo '====== {} ======' \; -exec cat '{}' \;
          find "$HOME/cylc-run" -name 'log.*' -type f \
              -exec echo '====== {} ======' \; -exec cat '{}' \;
          find "${TMPDIR:-/tmp}/${USER}/cylctb-"* -type f \
              -exec echo '====== {} ======' \; -exec cat '{}' \;

      - name: Copy cylc-run out of container
        if: failure() && contains(matrix.tests[2], '_remote')
        run: |
          docker cp bash:/root/cylc-run cylc-run/${{ matrix.tests[2] }}

      - name: Upload
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: Upload cylc-run artifact
          path: cylc-run

      - name: Fetch Remote Coverage
        if: contains(matrix.tests[2], '_remote')
        run: |
          # pick the first host in the list
          host="$(cut -d ' ' -f 1 <<< "${{ matrix.tests[2] }}")"
          # copy back the remote coverage files
          rsync -av \
            "${host}:/cylc/" \
            '.' \
            --include='.coverage*' \
            --exclude='*' \
            >rsyncout
          cat rsyncout
          # fiddle the python source location to match the local system
          for db in $(grep --color=never '.coverage\.' rsyncout); do
            sqlite3 "$db" "
              UPDATE file
              SET path = REPLACE(path, '/cylc/cylc/', '$PWD/cylc/')
            "
          done

      - name: Shutdown
        if: always()
        run: |
          etc/bin/swarm kill

      - name: Coverage
        run: |
          coverage combine -a
          coverage report
          bash <(curl -s https://codecov.io/bash)
